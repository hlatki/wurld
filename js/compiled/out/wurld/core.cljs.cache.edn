;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name wurld.core, :imports nil, :requires {wurld.util wurld.util, reagent.core reagent.core, reagent reagent.core}, :uses {atom reagent.core, get-possible-domains wurld.util}, :defs {marketing-nonesense {:meta {:end-column 25, :end-line 8, :column 6, :line 8, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :file "src/cljs/wurld/core.cljs", :line 8, :column 1, :end-line 8, :end-column 25, :test true, :name wurld.core/marketing-nonesense}, main {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 20, :end-line 57, :column 16, :line 57, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :name wurld.core/main, :variadic false, :file "src/cljs/wurld/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, input-word {:meta {:end-column 16, :end-line 11, :column 6, :line 11, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :file "src/cljs/wurld/core.cljs", :line 11, :column 1, :end-line 11, :end-column 16, :test true, :name wurld.core/input-word}, no-results-message {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 25, :end-line 19, :column 7, :line 19, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :name wurld.core/no-results-message, :variadic false, :file "src/cljs/wurld/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 11, :end-line 44, :column 7, :line 44, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :name wurld.core/page, :variadic false, :file "src/cljs/wurld/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, lister {:protocol-inline nil, :meta {:arglists (quote ([items])), :end-column 13, :end-line 14, :column 7, :line 14, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :name wurld.core/lister, :variadic false, :file "src/cljs/wurld/core.cljs", :end-column 13, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :test true}, input-component {:protocol-inline nil, :meta {:arglists (quote ([value])), :doc "Text box to enter word. Triggers url search", :end-column 22, :end-line 33, :column 7, :line 33, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :name wurld.core/input-component, :variadic false, :file "src/cljs/wurld/core.cljs", :end-column 22, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Text box to enter word. Triggers url search", :test true}, title-text {:meta {:end-column 16, :end-line 6, :column 6, :line 6, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :file "src/cljs/wurld/core.cljs", :line 6, :column 1, :end-line 6, :end-column 16, :test true, :name wurld.core/title-text}, sub-title-text {:meta {:end-column 20, :end-line 7, :column 6, :line 7, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :file "src/cljs/wurld/core.cljs", :line 7, :column 1, :end-line 7, :end-column 20, :test true, :name wurld.core/sub-title-text}, update-possibilities {:protocol-inline nil, :meta {:arglists (quote ([items])), :end-column 27, :end-line 26, :column 7, :line 26, :file "/Users/hannah/dev/wurld/src/cljs/wurld/core.cljs"}, :name wurld.core/update-possibilities, :variadic false, :file "src/cljs/wurld/core.cljs", :end-column 27, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:ul :li :key :div :class :input :type :placeholder :value :on-change :h1 :h2 :p], :seen #{:ul :key :placeholder :li :value :type :div :class :h2 :input :h1 :on-change :p}}, :doc nil}