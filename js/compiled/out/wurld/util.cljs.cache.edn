;; Analyzed by ClojureScript 0.0-3211
{:defs {get-possible-domains {:protocol-inline nil, :meta {:arglists (quote ([word])), :doc "Get possible urls from word", :end-column 27, :end-line 20, :column 7, :line 20, :file "/Users/hannah/dev/wurld/src/cljs/wurld/util.cljs"}, :name wurld.util/get-possible-domains, :variadic false, :file "src/cljs/wurld/util.cljs", :end-column 27, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Get possible urls from word", :test true}, check-tld {:protocol-inline nil, :meta {:arglists (quote ([s pos])), :doc "Given string and position pos, look up (subs s p) in tld set and return url.\n  Otherwise return false", :end-column 16, :end-line 10, :column 7, :line 10, :file "/Users/hannah/dev/wurld/src/cljs/wurld/util.cljs"}, :name wurld.util/check-tld, :variadic false, :file "src/cljs/wurld/util.cljs", :end-column 16, :method-params ([s pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s pos])), :doc "Given string and position pos, look up (subs s p) in tld set and return url.\n  Otherwise return false", :test true}, build-domain {:protocol-inline nil, :meta {:arglists (quote ([s i])), :doc "Create URL by inserting . between name and TLD, given location of split", :end-column 19, :end-line 5, :column 7, :line 5, :file "/Users/hannah/dev/wurld/src/cljs/wurld/util.cljs"}, :name wurld.util/build-domain, :variadic false, :file "src/cljs/wurld/util.cljs", :end-column 19, :method-params ([s i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s i])), :doc "Create URL by inserting . between name and TLD, given location of split", :test true}}, :imports nil, :requires {wurld.tlds wurld.tlds}, :uses nil, :require-macros nil, :use-macros nil, :excludes #{}, :doc nil, :name wurld.util}